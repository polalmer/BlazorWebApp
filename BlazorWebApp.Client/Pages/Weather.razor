@page "/weather"
@rendermode InteractiveAuto

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{   
    <i class="material-symbols-outlined" style="color:blue font-size: 34px; cursor:pointer;" 
    @onclick="async () => await FetchWeather()">refresh</i>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<WeatherForecast>? forecasts;

    private async Task FetchWeather()
    {
        using(HttpClient httpClient = new())
        {
            var response = await httpClient.GetAsync("http://localhost:5289/Api/Controller/Weather");
            forecasts = await response.Content.ReadFromJsonAsync<List<WeatherForecast>>();
        };
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchWeather();
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
