@page "/weatherWithoutAPI"

<!--
  Without specifiyng the component as Interactive
  Blazor will prerender it as static SSR -> static server side rendering 
-->
@rendermode InteractiveServer
@inject IWeatherService weatherservice

@using Client.Classes;
@using Controllers;

<h3>WeatherServer</h3>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <i class="material-symbols-outlined" style="color:blue font-size: 34px; cursor:pointer;"
       @onclick="async () => await FetchWeather()">refresh</i>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<WeatherForecast>? forecasts;

    private async Task FetchWeather()
    {
        forecasts = await weatherservice.GetWeatherForecastsAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchWeather();
    }

}
